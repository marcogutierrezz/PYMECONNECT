# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQKUhRkkR4CRmKDTdiYaEXbjawdZP8Wu
"""

import gradio as gr
import requests
import json
from datetime import datetime

# Clave de API (recuerda ocultarla si subes a un repositorio público)
OPENROUTER_API_KEY = "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"

# Prompt para el asistente
PROMPT = """
Eres un asistente especializado en normativas y estrategias para PYMEs publicitarias en El Salvador.
Tu objetivo es proporcionar respuestas claras, precisas y personalizadas para ayudar a empresarios y emprendedores
a cumplir regulaciones, optimizar su negocio y aprovechar oportunidades de crecimiento.

CONTEXTO DEL USUARIO:
- Etapa del negocio: {business_stage}
- Temas de interés: {topics}

INSTRUCCIONES ESPECÍFICAS:

1. NORMATIVAS LEGALES Y FISCALES
- Explica de forma sencilla las leyes y regulaciones aplicables a agencias de publicidad en El Salvador
- Menciona fuentes oficiales cuando sea posible (CNR, Ministerio de Hacienda, CONAMYPE)
- Sé específico con los trámites, costos y plazos

2. ESTRATEGIAS DE CRECIMIENTO Y MARKETING
- Ofrece consejos prácticos sobre publicidad digital, branding, redes sociales relevantes para El Salvador
- Sugiere herramientas accesibles para PYMEs salvadoreñas
- Adapta recomendaciones al contexto económico y cultural de El Salvador

3. FORMATO OBLIGATORIO PARA TODAS TUS RESPUESTAS:
Debes estructurar CADA UNA de tus respuestas siguiendo EXACTAMENTE este formato:
- Respuestas en Español
- Usa lenguaje claro y sin tecnicismos
- Formatea respuestas para ser leídas en dispositivos móviles (párrafos cortos, listas)
- Para respuestas con pasos, usa emojis como marcadores (1️⃣, 2️⃣, etc.)
- Limita respuestas a máximo 250 palabras
- Asegurate de que las respuestas vayan en estilo de lista, no en estilo de parrafo para que sea vea ordenado y sea mas facil de entender.
- Si es relevante, ofrece opciones al final con preguntas como "¿Quieres que te explique más sobre X?"

NO PUEDES RESPONDER SIN USAR ESTE FORMATO. Es MANDATORIO que sigas este formato para TODAS tus respuestas.

4. PERSONALIZACIÓN:
- Si el negocio es nuevo: enfoca en trámites iniciales, costos reducidos
- Si está en crecimiento: enfoca en optimización y expansión
- Si está consolidado: enfoca en innovación y eficiencia

NOTA IMPORTANTE: Si no conoces la respuesta exacta sobre alguna normativa específica de El Salvador, indícalo
claramente y sugiere fuentes oficiales donde el usuario pueda consultar información actualizada.

RECUERDA: Toda respuesta DEBE incluir emojis numéricos (1️⃣, 2️⃣, 3️⃣...) para los pasos, y DEBE terminar con una pregunta.
"""

class ChatbotPublicidadSV:
    def __init__(self):
        self.conversation_history = []
        self.user_context = {"business_stage": "nuevo", "topics": "publicidad digital, normativas"}

    def update_user_context(self, message):
        if any(word in message.lower() for word in ["nuevo", "iniciar", "comenzar"]):
            self.user_context["business_stage"] = "nuevo"
        elif any(word in message.lower() for word in ["crecimiento", "expandir"]):
            self.user_context["business_stage"] = "crecimiento"
        elif any(word in message.lower() for word in ["consolidado", "establecido"]):
            self.user_context["business_stage"] = "consolidado"

    def get_response(self, user_message):
        self.update_user_context(user_message)
        self.conversation_history.append({"role": "user", "content": user_message})

        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
        payload = {
            "model": "deepseek/deepseek-r1-zero:free",
            "messages": [
                {"role": "system", "content": PROMPT.format(**self.user_context)},
                {"role": "user", "content": user_message}
            ],
            "temperature": 0.7
        }

        try:
            response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, data=json.dumps(payload))
            response_json = response.json()
            assistant_message = response_json.get("choices", [{}])[0].get("message", {}).get("content", "No pude procesar la respuesta.")

            self.conversation_history.append({"role": "assistant", "content": assistant_message})
            return assistant_message
        except Exception as e:
            return f"Error: {str(e)}"

chatbot = ChatbotPublicidadSV()

# Crear interfaz con Gradio
def chat(user_input):
    return chatbot.get_response(user_input)

interface = gr.Interface(fn=chat, inputs="text", outputs="text", title="Chatbot PYMEs SV", description="Asistente para agencias de publicidad en El Salvador")
interface.launch()